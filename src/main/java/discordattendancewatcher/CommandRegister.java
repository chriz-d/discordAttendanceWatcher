package discordattendancewatcher;

import java.util.ArrayList;
import java.util.List;

import net.dv8tion.jda.api.events.guild.GenericGuildEvent;
import net.dv8tion.jda.api.events.guild.GuildJoinEvent;
import net.dv8tion.jda.api.events.guild.GuildReadyEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.commands.Command.Choice;
import net.dv8tion.jda.api.interactions.commands.OptionType;
import net.dv8tion.jda.api.interactions.commands.build.Commands;
import net.dv8tion.jda.api.interactions.commands.build.OptionData;
import net.dv8tion.jda.api.interactions.commands.build.SlashCommandData;

public class CommandRegister extends ListenerAdapter {

    private final String[] trackNames = {"ğŸ‡ªğŸ‡¸ Barcelona ğŸ‡ªğŸ‡¸",
        "ğŸ‡¦ğŸ‡º Bathurst ğŸ‡¦ğŸ‡º",
        "ğŸ‡¬ğŸ‡§ Brands Hatch ğŸ‡¬ğŸ‡§",
        "ğŸ‡ºğŸ‡¸ Circuit of the Americas ğŸ‡ºğŸ‡¸",
        "ğŸ‡¬ğŸ‡§ Donington Park ğŸ‡¬ğŸ‡§",
        "ğŸ‡­ğŸ‡º Hungaroring ğŸ‡­ğŸ‡º",
        "ğŸ‡®ğŸ‡¹ Imola ğŸ‡®ğŸ‡¹",
        "ğŸ‡ºğŸ‡¸ Indianapolis ğŸ‡ºğŸ‡¸",
        "ğŸ‡¿ğŸ‡¦ Kyalami ğŸ‡¿ğŸ‡¦",
        "ğŸ‡ºğŸ‡¸ Laguna Seca ğŸ‡ºğŸ‡¸",
        "ğŸ‡®ğŸ‡¹ Misano ğŸ‡®ğŸ‡¹",
        "ğŸ‡®ğŸ‡¹ Monza ğŸ‡®ğŸ‡¹",
        "ğŸ‡©ğŸ‡ª NÃ¼rburgring ğŸ‡©ğŸ‡ª",
        "ğŸ‡¬ğŸ‡§ Oulton Park ğŸ‡¬ğŸ‡§",
        "ğŸ‡«ğŸ‡· Paul Ricard ğŸ‡«ğŸ‡·",
        "ğŸ‡¬ğŸ‡§ Silverstone ğŸ‡¬ğŸ‡§",
        "ğŸ‡¬ğŸ‡§ Snetterton ğŸ‡¬ğŸ‡§",
        "ğŸ‡§ğŸ‡ª Spa-Francorchamps ğŸ‡§ğŸ‡ª",
        "ğŸ‡ºğŸ‡¸ Watkins Glen ğŸ‡ºğŸ‡¸",
        "ğŸ‡¯ğŸ‡µ Suzuka ğŸ‡¯ğŸ‡µ",
        "ğŸ‡³ğŸ‡± Zandvoort ğŸ‡³ğŸ‡±",
        "ğŸ‡ªğŸ‡¸ Valencia ğŸ‡ªğŸ‡¸",
        "ğŸ‡§ğŸ‡ª Zolder ğŸ‡§ğŸ‡ª"
    };

    @Override
    public void onGuildReady(GuildReadyEvent event) {
        registerCommands(event);
    }
   
    @Override
    public void onGuildJoin(GuildJoinEvent event) {
        registerCommands(event);
    }
    
    private void registerCommands(GenericGuildEvent event) {
        SlashCommandData postEventCommand = getPostEventCommand(event);
        SlashCommandData racestatsCommand = getPostRaceStatsCommand(event);
        event.getGuild().updateCommands().addCommands(postEventCommand, racestatsCommand).queue();
    }
   
    private SlashCommandData getPostEventCommand(GenericGuildEvent event) {
        OptionData date = new OptionData(OptionType.STRING, "date", "Date and time the event will start. (Unix timestamp, that really big number)", true);
        OptionData title = new OptionData(OptionType.STRING, "title", "Title of the event. (E.g. Season 2 - Round 7)", true);
        OptionData track = getTrackOptions();
        OptionData roleToPing = new OptionData(OptionType.ROLE, "role", "Who to ping for the event.", true);
        OptionData reserveRoleToPing = new OptionData(OptionType.ROLE, "reserverole", "Who to ping for the event (reserve).", true);
        OptionData image = new OptionData(OptionType.ATTACHMENT, "image", "The image which will be shown below the post", true);
        OptionData raceFormat = new OptionData(OptionType.STRING, "raceformat", "Textblock for the race format. Use | to start a new line.");
        OptionData details = new OptionData(OptionType.STRING, "details", "Misc details. Use | to start a new line.");
        SlashCommandData command = Commands.slash("accevent", "Posts a new ACC event.")
                .addOptions(date, title, track, roleToPing, reserveRoleToPing, image, raceFormat, details);
        return command;
    }

    private SlashCommandData getPostRaceStatsCommand(GenericGuildEvent event) {
        OptionData url = new OptionData(OptionType.STRING, "url", "Simresults URL of the race", true);
        OptionData title = new OptionData(OptionType.STRING, "title", "Title of the message (E.g. Race Statistics Season 2 - Round 7:  ğŸ‡®ğŸ‡¹ Misano ğŸ‡®ğŸ‡¹)", true);
        
        SlashCommandData command = Commands.slash("racestats", "Posts screenshots of the race stats of the given URL.")
                .addOptions(url, title);
        return command;
    }

    private OptionData getTrackOptions() {
        List<Choice> choices = new ArrayList<>();
        for(String trackName : trackNames) {
            choices.add(new Choice(trackName, trackName));
        }
        OptionData track = new OptionData(OptionType.STRING, "track", "Track for the event.", true)
            .addChoices(choices);
        return track;
    }
}